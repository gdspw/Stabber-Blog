I"+<blockquote>
  <p><strong>背景</strong>：项目的日常迭代，总会涉及到对于已有表的结构调整，每次表结构的变更都会涉及到model对应xml的变更，每次的变更都是小心翼翼，以求不影响已有的功能，着实令人头疼；直到遇见Mapper4，才解决之一难题。</p>
</blockquote>

<hr />
<p>通用Mapper4是一个可以实现任意MyBatis通用方法的框架，项目提供了常规的增删盖茶操作以及Example相关的单表操作，是为了解决Mybati使用的90%的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间。
本文主要是对通用Mapper做下样例的介绍及依赖引入、配置等，希望能够对于各位阅读的同学有些许帮助。</p>

<h3 id="1-先看下样例">1. 先看下样例</h3>
<p>数据库如下表：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE `country` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `countryname` varchar(255) DEFAULT NULL COMMENT '名称',
  `countrycode` varchar(255) DEFAULT NULL COMMENT '代码',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10011 DEFAULT CHARSET=utf8 COMMENT='国家信息';
</code></pre></div></div>

<p>对应的Java实体类型如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Country {
    @Id
    private Integer id;
    private String  countryname;
    private String  countrycode;

    //省略 getter 和 setter
}
</code></pre></div></div>
<p>最简单的情况下，只需要一个@Id 标记为主键即可，数据库中的字段名和实体类的字段名是完全相同的，这中情况下实体和表可以直接映射。
<strong>提醒：</strong>如果实体类中没有一个标记 @Id 的字段，当你使用带有 ByPrimaryKey 的方法时，所有的字段会作为联合主键来使用，也就会出现类似</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>where id = ? and countryname = ? and countrycode = ? 的情况
</code></pre></div></div>
<p>通用Mapper提供了大量的通用接口，这里以最常用的Mapper接口为例
该实体类对应的dao层接口如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import tk.mybatis.mapper.common.Mapper;

public interface CountryMapper extends Mapper&lt;Country&gt; {}

</code></pre></div></div>
<p>该接口默认集成的方法如下：</p>
<ul>
  <li>selectOne</li>
  <li>select</li>
  <li>selectAll</li>
  <li>selectCount</li>
  <li>selectByPrimaryKey</li>
  <li>等等……
从 MyBatis 中获取该接口后就可以直接使用：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//从 MyBatis 或者 Spring 中获取 countryMapper，然后调用 selectAll 方法
List&lt;Country&gt; countries = countryMapper.selectAll();
//根据主键查询
Country country = countryMapper.selectByPrimaryKey(1);
//或者使用对象传参，适用于1个字段或者多个字段联合主键使用
Country query = new Country();
query.setId(1);
country = countryMapper.selectByPrimaryKey(query);
</code></pre></div>    </div>
  </li>
</ul>

<p>如果想要增加自己写的方法，可以直接在ContryMapper中增加。</p>
<h4 id="11-使用纯接口注解方式">1.1 使用纯接口注解方式</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import org.apache.ibatis.annotations.Select;
import tk.mybatis.mapper.common.Mapper;

public interface CountryMapper extends Mapper&lt;Country&gt; {
    @Select("select * from country where countryname = #{countryname}")
    Country selectByCountryName(String countryname);
}
</code></pre></div></div>
<p>复杂的sql也是可以的，这里只是一个简单的举例</p>

<h4 id="12-如果使用xml方式需要提供接口对应的xml文件">1.2 如果使用XML方式，需要提供接口对应的XML文件</h4>
<p>对，你没有看错，Mapper可以跟xml文件共存，看到这里是不是觉得很意外，哈哈哈！</p>

<p>例如提供了 CountryMapper.xml 文件，内容如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"tk.mybatis.sample.mapper.CountryMapper"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"selectByCountryName"</span> <span class="na">resultType=</span><span class="s">"tk.mybatis.model.Country"</span><span class="nt">&gt;</span>
        select * from country where countryname = #{countryname}
    <span class="nt">&lt;/select&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>
<p>在接口中添加对应的方法：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import tk.mybatis.mapper.common.Mapper;

public interface CountryMapper extends Mapper&lt;Country&gt; {
    Country selectByCountryName(String countryname);
}
</code></pre></div></div>
<p><em>在接口中添加其他方法的时候和只用 MyBatis 是完全一样的，但是需要注意，在对应的 XML 中，不能出现和继承接口中同名的方法！</em>
多态！</p>

<p>在接口中，只要不是通过注解来实现接口方法，接口是允许重名的，真正调用会使用通用 Mapper 提供的方法。</p>

<p>例如在上面 CountryMapper 中提供一个带分页的 selectAll 方法：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  public interface CountryMapper extends Mapper&lt;Country&gt; {
    List&lt;Country&gt; selectAll(RowBounds rowBounds);
}
</code></pre></div></div>
<p>在 Java 8 的接口中通过默认方法还能增加一些简单的间接调用方&gt;法，例如：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface CountryMapper extends Mapper&lt;Country&gt; {
    //这个示例适合参考实现对乐观锁方法封装
    default void updateSuccess(Country country){
        Assert.assertEquals(1, updateByPrimaryKey(country));
    }
}
</code></pre></div></div>

<h3 id="2-集成方式">2. 集成方式</h3>
<h4 id="21-spring集成">2.1 Spring集成</h4>
<hr />
<h5 id="211-添加依赖">2.1.1 添加依赖</h5>
<p>通用Mapper支持Mybatis 3.2.4+，使用该通用Mapper的同学注意当前项目的Mybatis版本号</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mapper&lt;/artifactId&gt;
    &lt;version&gt;最新版本&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>
<h5 id="212-xml配置-mapperscannerconfigurer">2.1.2 XML配置-MapperScannerConfigurer</h5>
<p>引入通用Mapper4依赖后，只需要替换XML原有的<em>org.mybatis.spring.mapper.MapperScannerConfigurer</em> 为<em>tk.mybatis.spring.mapper.MapperScannerConfigurer</em>，两者的唯一区别一个是 <strong>tk</strong> 一个是 <strong>org</strong>。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
    &lt;property name="basePackage" value="扫描包名"/&gt;
&lt;/bean&gt;
</code></pre></div></div>
<p>如果需要对Mapper进行特殊配置，可以按照以下方式：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
    &lt;property name="basePackage" value="tk.mybatis.mapper.mapper"/&gt;
    &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt;
    &lt;property name="properties"&gt;
        &lt;value&gt;
            参数名=值
            参数名2=值2
            ...
        &lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre></div></div>

<p>Spring引入更多的配置相关可以移步官方介绍：https://gitee.com/free/Mapper/wikis/1.2-spring?sort_id=208197</p>

<h4 id="21-spring-boot-集成">2.1 Spring Boot 集成</h4>
<p>Spring Boot 在微服务领域中已经成为主流。</p>

<p>这里介绍通用 Mapper 如何同 Spring Boot 进行集成。</p>

<p>为了能适应各种情况的用法，这里也提供了多种集成方式，基本上分为两大类。</p>

<ul>
  <li>基于 starter 的自动配置</li>
  <li>基于 @MapperScan 注解的手工配置</li>
</ul>

<h5 id="211-mapper-spring-boot-starter">2.1.1 mapper-spring-boot-starter</h5>
<p>在 starter 的逻辑中，如果你没有使用 @MapperScan 注解，你就需要在你的接口上增加 @Mapper 注解，否则 MyBatis 无法判断扫描哪些接口。</p>

<p>这里的第一种用法没有用 @MapperScan 注解，所以你需要在所有接口上增加 @Mapper 注解。</p>

<p>以后会考虑增加其他方式。</p>

<p>你只需要添加通用 Mapper 提供的 starter 就完成了最基本的集成，依赖如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
  &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;
  &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;
  &lt;version&gt;版本号&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>
<p>如果你需要对通用 Mapper 进行配置，你可以在 Spring Boot 的配置文件中配置 mapper. 前缀的配置。</p>

<p>例如在 yml 格式中配置：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mapper:
  mappers:
    - tk.mybatis.mapper.common.Mapper
    - tk.mybatis.mapper.common.Mapper2
  notEmpty: true
</code></pre></div></div>
<p>在 properties 配置中：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mapper.mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.Mapper2
mapper.notEmpty=true
</code></pre></div></div>
<h5 id="222-mapperscan-注解配置">2.2.2 @MapperScan 注解配置</h5>
<p>你可以给带有 @Configuration 的类配置该注解，或者直接配置到 Spring Boot 的启动类上，如下：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@tk.mybatis.spring.annotation.MapperScan(basePackages = "扫描包")
@SpringBootApplication
public class SampleMapperApplication implements CommandLineRunner {
</code></pre></div></div>
<p><strong>注意：这里使用的 tk.mybatis.spring.annotation.MapperScan !</strong></p>

<p>以上就是对于Mapper4的简要介绍，更多功能可参考官网：https://gitee.com/free/Mapper ,希望能够帮助到大家，减轻繁琐的重复的工作，提高coding效率，感谢阅读本文！</p>
:ET